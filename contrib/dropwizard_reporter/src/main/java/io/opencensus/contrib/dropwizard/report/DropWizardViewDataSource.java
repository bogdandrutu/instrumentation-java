/*
 * Copyright 2018, OpenCensus Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.opencensus.contrib.dropwizard.report;

import com.codahale.metrics.Counter;
import com.codahale.metrics.Histogram;
import com.codahale.metrics.Meter;
import com.codahale.metrics.MetricFilter;
import com.codahale.metrics.MetricRegistry;
import com.codahale.metrics.Snapshot;
import com.codahale.metrics.Timer;
import com.google.common.collect.Lists;
import io.opencensus.common.Timestamp;
import io.opencensus.exporter.stats.ViewData;
import io.opencensus.exporter.stats.ViewDataSource;
import io.opencensus.exporter.stats.ViewDescription;
import io.opencensus.stats.Aggregation;
import io.opencensus.stats.Aggregation.LastValue;
import io.opencensus.stats.Aggregation.Sum;
import io.opencensus.stats.AggregationData;
import io.opencensus.stats.Measure;
import io.opencensus.stats.Measure.MeasureDouble;
import io.opencensus.stats.Measure.MeasureLong;
import io.opencensus.stats.View;
import io.opencensus.tags.TagKey;
import io.opencensus.tags.TagValue;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SortedMap;
import java.util.concurrent.TimeUnit;

public final class DropWizardViewDataSource extends ViewDataSource {
  private static final String DROP_WIZARD_NAME = "dropwizard.io";
  private static final String DROP_WIZARD_METRIC_DESCRIPTION = "Metric generated by DropWizard.";
  private static final String MEASURE_DESCRIPTION_DOUBLE =
      "dropwizard.io/never/use/this/measure/double";
  private static final String MEASURE_DESCRIPTION_LONG =
      "dropwizard.io/never/use/this/measure/long";
  private static final String MEASURE_DESCRIPTION_LONG_NO_UNIT =
      "dropwizard.io/never/use/this/measure/long/no_unit";
  private static final MeasureLong MEASURE_LONG_NO_UNIT =
      MeasureLong.create(
          "measure2", MEASURE_DESCRIPTION_LONG_NO_UNIT, "1" /* dimensionless value */);
  private static final Sum SUM = Sum.create();
  private static final LastValue LAST_VALUE = LastValue.create();

  private final MetricRegistry registry;
  private final MetricFilter filter;
  private final double durationFactor;
  private final String durationUnitStr;
  private final MeasureDouble measureDouble;
  // private final MeasureLong measureLong;
  private final Timestamp startTime;

  /**
   * Creates a new {@link DropWizardViewDataSource} instance.
   *
   * @param registry the {@link com.codahale.metrics.MetricRegistry} containing the metrics this
   *     reporter will report
   * @param name the reporter's name
   * @param filter the filter for which metrics to report
   * @param durationUnit a unit of time
   */
  public DropWizardViewDataSource(
      MetricRegistry registry, String name, MetricFilter filter, TimeUnit durationUnit) {
    this.registry = registry;
    this.filter = filter;
    this.durationFactor = 1.0 / durationUnit.toNanos(1);
    this.durationUnitStr = durationUnit.toString().toLowerCase(Locale.US);
    measureDouble = MeasureDouble.create("measure1", MEASURE_DESCRIPTION_DOUBLE, durationUnitStr);
    // measureLong = MeasureLong.create("measure2", MEASURE_DESCRIPTION_LONG, durationUnitStr);
    startTime = Timestamp.fromMillis(System.currentTimeMillis());
  }

  private static ViewDescription createViewDescription(
      String name, Aggregation aggregation, Measure measure) {
    return createViewDescription(name, aggregation, measure, Collections.<TagKey>emptyList());
  }

  private static ViewDescription createViewDescription(
      String name, Aggregation aggregation, Measure measure, List<TagKey> tagKeys) {
    return ViewDescription.create(
        View.Name.create(name), DROP_WIZARD_METRIC_DESCRIPTION, measure, aggregation, tagKeys);
  }

  /** Report the current values of all metrics in the registry. */
  private Collection<ViewData> getAllMetrics() {
    // TODO(bdrutu): Record Gauges as well.
    return convertMetrics(
        registry.getCounters(filter),
        registry.getHistograms(filter),
        registry.getMeters(filter),
        registry.getTimers(filter),
        Timestamp.fromMillis(System.currentTimeMillis()));
  }

  private Collection<ViewData> convertMetrics(
      SortedMap<String, Counter> counters,
      SortedMap<String, Histogram> histograms,
      SortedMap<String, Meter> meters,
      SortedMap<String, Timer> timers,
      Timestamp endTime) {
    List</*@Nullable*/ ViewData> viewDataList = Lists.newArrayList();
    for (SortedMap.Entry<String, Counter> entry : counters.entrySet()) {
      ViewDescription viewDescription =
          createViewDescription(entry.getKey(), SUM, MEASURE_LONG_NO_UNIT);
      AggregationData sumData = AggregationData.SumDataLong.create(entry.getValue().getCount());
      Map<List<TagValue>, AggregationData> aggregationDataMap =
          Collections.singletonMap(Collections.<TagValue>emptyList(), sumData);
      viewDataList.add(ViewData.create(viewDescription, startTime, endTime, aggregationDataMap));
    }
    for (SortedMap.Entry<String, Meter> entry : meters.entrySet()) {
      ViewDescription viewDescription =
          createViewDescription(entry.getKey(), SUM, MEASURE_LONG_NO_UNIT);
      AggregationData sumData = AggregationData.SumDataLong.create(entry.getValue().getCount());
      Map<List<TagValue>, AggregationData> aggregationDataMap =
          Collections.singletonMap(Collections.<TagValue>emptyList(), sumData);
      viewDataList.add(ViewData.create(viewDescription, startTime, endTime, aggregationDataMap));
    }
    for (SortedMap.Entry<String, Timer> entry : timers.entrySet()) {
      viewDataList.addAll(
          createViewDataForHistogram(
              entry.getKey(),
              entry.getValue().getCount(),
              entry.getValue().getSnapshot(),
              durationFactor,
              startTime,
              endTime));
    }
    for (SortedMap.Entry<String, Histogram> entry : histograms.entrySet()) {
      viewDataList.addAll(
          createViewDataForHistogram(
              entry.getKey(),
              entry.getValue().getCount(),
              entry.getValue().getSnapshot(),
              1.0,
              startTime,
              endTime));
    }
    return viewDataList;
  }

  private List<ViewData> createViewDataForHistogram(
      String name,
      long count,
      Snapshot snapshot,
      double durationFactor,
      Timestamp startTime,
      Timestamp endTime) {
    // Add as a cumulative sum the count.
    final ViewDescription viewDescriptionCount =
        createViewDescription(name + "_count", SUM, measureDouble);
    final AggregationData sumData = AggregationData.SumDataLong.create(count);
    final Map<List<TagValue>, AggregationData> aggregationDataMapCount =
        Collections.singletonMap(Collections.<TagValue>emptyList(), sumData);

    // Add as a gauge value all percentiles
    final ViewDescription viewDescription =
        createViewDescription(
            name, LAST_VALUE, measureDouble, Collections.singletonList(TagKey.create("quantile")));
    // Internally DropWizard keeps data as nanoseconds.
    Map<List<TagValue>, AggregationData.LastValueDataDouble> aggregationDataMap = new HashMap<>();
    aggregationDataMap.put(
        Collections.singletonList(TagValue.create("0.5")),
        AggregationData.LastValueDataDouble.create(snapshot.getMedian() * durationFactor));
    aggregationDataMap.put(
        Collections.singletonList(TagValue.create("0.75")),
        AggregationData.LastValueDataDouble.create(snapshot.get75thPercentile() * durationFactor));
    aggregationDataMap.put(
        Collections.singletonList(TagValue.create("0.95")),
        AggregationData.LastValueDataDouble.create(snapshot.get95thPercentile() * durationFactor));
    aggregationDataMap.put(
        Collections.singletonList(TagValue.create("0.98")),
        AggregationData.LastValueDataDouble.create(snapshot.get98thPercentile() * durationFactor));
    aggregationDataMap.put(
        Collections.singletonList(TagValue.create("0.99")),
        AggregationData.LastValueDataDouble.create(snapshot.get99thPercentile() * durationFactor));
    aggregationDataMap.put(
        Collections.singletonList(TagValue.create("0.999")),
        AggregationData.LastValueDataDouble.create(snapshot.get999thPercentile() * durationFactor));
    return Lists.newArrayList(
        ViewData.create(viewDescriptionCount, startTime, endTime, aggregationDataMapCount),
        ViewData.create(viewDescription, endTime, endTime, aggregationDataMap));
  }

  @Override
  public String getName() {
    return DROP_WIZARD_NAME;
  }

  @Override
  public Collection<ViewData> getViewData() {
    return getAllMetrics();
  }
}
